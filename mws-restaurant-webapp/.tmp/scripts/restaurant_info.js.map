{"version":3,"sources":["restaurant_info.js"],"names":["restaurant","newMap","document","addEventListener","event","initMap","fetchRestaurantFromURL","error","console","container","L","DomUtil","get","_leaflet_id","self","map","center","latlng","lat","lng","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","id","addTo","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","getParameterByName","fetchRestaurantById","fillRestaurantHTML","name","getElementById","innerHTML","address","image","className","src","imageUrlForRestaurant","cuisine","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","trim","appendChild","time","reviews","title","noReviews","ul","forEach","review","createReviewHTML","li","date","rating","comments","breadcrumb","url","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar newMap;\n\n/**\n * Initialize map as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  initMap();\n});\n\n/**\n * Initialize leaflet map\n */\ninitMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      // fix for `Error: Map container is already initialized.`\n      var container = L.DomUtil.get('map');\n      if (container != null) {\n        container._leaflet_id = null;\n      }\n      self.newMap = L.map('map', {\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\n        zoom: 16,\n        scrollWheelZoom: false\n      });\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token=pk.eyJ1IjoibXR0d2hsbHkiLCJhIjoiY2prZngzcGF1MGRhcTNwbzlhYTlza2NicyJ9.Cw82KbQTNdjYdobD3HTK-w', {\n        mapboxToken: 'pk.eyJ1IjoibXR0d2hsbHkiLCJhIjoiY2prZngzcGF1MGRhcTNwbzlhYTlza2NicyJ9.Cw82KbQTNdjYdobD3HTK-w',\n        maxZoom: 18,\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n          'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        id: 'mapbox.streets'\n      }).addTo(newMap);\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\n    }\n  });\n}\n\n/* window.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n};\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant);\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL';\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant);\n    });\n  }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img';\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key.trim();\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key].trim();\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h2');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant = self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};\n"]}