{"version":3,"sources":["restaurant_info.js"],"names":["restaurant","newMap","document","addEventListener","event","initMap","fetchRestaurantFromURL","error","console","container","L","DomUtil","get","_leaflet_id","self","map","center","latlng","lat","lng","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","id","addTo","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","getParameterByName","fetchRestaurantById","fillRestaurantHTML","name","getElementById","innerHTML","address","image","className","src","imageUrlForRestaurant","cuisine","cuisine_type","operating_hours","fillRestaurantHoursHTML","fetchReviews","then","reviews","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","trim","appendChild","time","title","noReviews","ul","log","forEach","review","createReviewHTML","li","date","d","Date","createdAt","toDateString","rating","comments","addReview","preventDefault","restaurantId","value","querySelector","formReview","restaurant_id","parseInt","substring","addReviewHTML","getElementsByTagName","reset","remove","insertBefore","firstChild","breadcrumb","url","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar newMap;\n\n/**\n * Initialize map as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  //fetchNeighborhoods();\n  //fetchCuisines();\n  initMap();\n});\n\n/**\n * Initialize leaflet map\n */\ninitMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      // fix for `Error: Map container is already initialized.`\n      var container = L.DomUtil.get('map');\n      if (container != null) {\n        container._leaflet_id = null;\n      }\n      self.newMap = L.map('map', {\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\n        zoom: 16,\n        scrollWheelZoom: false\n      });\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token=pk.eyJ1IjoibXR0d2hsbHkiLCJhIjoiY2prZngzcGF1MGRhcTNwbzlhYTlza2NicyJ9.Cw82KbQTNdjYdobD3HTK-w', {\n        mapboxToken: 'pk.eyJ1IjoibXR0d2hsbHkiLCJhIjoiY2prZngzcGF1MGRhcTNwbzlhYTlza2NicyJ9.Cw82KbQTNdjYdobD3HTK-w',\n        maxZoom: 18,\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n          'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        id: 'mapbox.streets'\n      }).addTo(newMap);\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\n    }\n  });\n};\n\n/* window.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n};*/\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant);\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL';\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant);\n    });\n  }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img';\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  DBHelper.fetchReviews(restaurant.id)\n      .then(reviews => fillReviewsHTML(reviews))\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key.trim();\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key].trim();\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  //console.log('fill reviews running')\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h2');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  console.log('adding reviews to html: ' + reviews)\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  // create the reviews\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = `Name: ${review.name}`;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  let d = new Date(review.createdAt).toDateString()//`${review.date}`;\n  date.innerHTML = 'Date: ' + d;//`Date: ${review.date}.toLocaleString()}`;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n  return li;\n};\n\n/**\n * Deal with review form submissions\n */\n// Form validation & submission\n\naddReview = () => {\n  event.preventDefault();\n  // Getting the data from the form\n  let restaurantId = getParameterByName('id');\n  let name = document.getElementById('name').value;\n  let rating;\n  let comments = document.getElementById('msg').value;\n  rating = document.querySelector('.star input:checked').value;\n  const review = [restaurantId, name, rating, comments];\n\n  // Add data to DOM\n  const formReview = {\n      restaurant_id: parseInt(review[0]),\n      name: review[1],\n      rating: parseInt(review[2]),\n      comments: review[3].substring(0, 300),\n      createdAt: new Date()\n  };\n  // Send review to backend\n  DBHelper.addReview(formReview);\n  addReviewHTML(formReview);\n  document.getElementsByTagName('form').reset();\n};\n\naddReviewHTML = (review) => {\n  if (document.getElementById('no-review')) {\n      document.getElementById('no-review').remove();\n  }\n  const container = document.getElementById('reviews-container');\n  const ul = document.getElementById('reviews-list');\n\n  //insert the new review on top\n  ul.insertBefore(createReviewHTML(review), ul.firstChild);\n  container.appendChild(ul);\n}\n\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant = self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.className = 'restaurantCrumb';\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};\n"]}