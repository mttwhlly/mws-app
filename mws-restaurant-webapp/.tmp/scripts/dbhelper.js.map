{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","DATABASE_URL","port","fetchRestaurants","callback","id","fetchURL","fetch","method","then","response","json","restaurants","catch","error","fetchRestaurantById","restaurant","find","r","fetchRestaurantByCuisine","cuisine","results","filter","cuisine_type","fetchRestaurantByNeighborhood","neighborhood","fetchRestaurantByCuisineAndNeighborhood","fetchNeighborhoods","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","fetchCuisines","cuisines","uniqueCuisines","urlForRestaurant","imageUrlForRestaurant","photograph","mapMarkerForRestaurant","marker","L","latlng","lat","lng","title","name","alt","url","addTo","newMap"],"mappings":"AAAA;;;AAGA,MAAMA,QAAN,CAAe;;AAEb;;;;AAIA,aAAWC,YAAX,GAA0B;AACxB,UAAMC,OAAO,IAAb,CADwB,CACL;AACnB,WAAQ,oBAAmBA,IAAK,eAAhC;AACD;;AAED;;;AAGA,SAAOC,gBAAP,CAAwBC,QAAxB,EAAkCC,EAAlC,EAAsC;AACpC,QAAIC,QAAJ;AACA,QAAI,CAACD,EAAL,EAAS;AACPC,iBAAWN,SAASC,YAApB;AACD,KAFD,MAEO;AACLK,iBAAWN,SAASC,YAAT,GAAwB,GAAxB,GAA8BI,EAAzC;AACD;;AAED;;AAEAE,UAAMD,QAAN,EAAgB;AACdE,cAAQ;AADM,KAAhB,EAGCC,IAHD,CAGMC,YAAY;AAChB,aAAOA,SAASC,IAAT,EAAP;AACD,KALD,EAMCF,IAND,CAMMG,eAAe;AACnB;AACAR,eAAS,IAAT,EAAeQ,WAAf;AACD,KATD,EAUCC,KAVD,CAUOC,SAAS;AACdV,eAAU,8BAA6BU,KAAM,EAA7C,EAAgD,IAAhD;AACD,KAZD;AAaA;;;;;;;;;;;;;;AAcD;;AAED;;;AAGA,SAAOC,mBAAP,CAA2BV,EAA3B,EAA+BD,QAA/B,EAAyC;AACvC;AACAJ,aAASG,gBAAT,CAA0B,CAACW,KAAD,EAAQF,WAAR,KAAwB;AAChD,UAAIE,KAAJ,EAAW;AACTV,iBAASU,KAAT,EAAgB,IAAhB;AACD,OAFD,MAEO;AACL,cAAME,aAAaJ,YAAYK,IAAZ,CAAiBC,KAAKA,EAAEb,EAAF,IAAQA,EAA9B,CAAnB;AACA,YAAIW,UAAJ,EAAgB;AAAE;AAChBZ,mBAAS,IAAT,EAAeY,UAAf;AACD,SAFD,MAEO;AAAE;AACPZ,mBAAS,2BAAT,EAAsC,IAAtC;AACD;AACF;AACF,KAXD;AAYD;;AAED;;;AAGA,SAAOe,wBAAP,CAAgCC,OAAhC,EAAyChB,QAAzC,EAAmD;AACjD;AACAJ,aAASG,gBAAT,CAA0B,CAACW,KAAD,EAAQF,WAAR,KAAwB;AAChD,UAAIE,KAAJ,EAAW;AACTV,iBAASU,KAAT,EAAgB,IAAhB;AACD,OAFD,MAEO;AACL;AACA,cAAMO,UAAUT,YAAYU,MAAZ,CAAmBJ,KAAKA,EAAEK,YAAF,IAAkBH,OAA1C,CAAhB;AACAhB,iBAAS,IAAT,EAAeiB,OAAf;AACD;AACF,KARD;AASD;;AAED;;;AAGA,SAAOG,6BAAP,CAAqCC,YAArC,EAAmDrB,QAAnD,EAA6D;AAC3D;AACAJ,aAASG,gBAAT,CAA0B,CAACW,KAAD,EAAQF,WAAR,KAAwB;AAChD,UAAIE,KAAJ,EAAW;AACTV,iBAASU,KAAT,EAAgB,IAAhB;AACD,OAFD,MAEO;AACL;AACA,cAAMO,UAAUT,YAAYU,MAAZ,CAAmBJ,KAAKA,EAAEO,YAAF,IAAkBA,YAA1C,CAAhB;AACArB,iBAAS,IAAT,EAAeiB,OAAf;AACD;AACF,KARD;AASD;;AAED;;;AAGA,SAAOK,uCAAP,CAA+CN,OAA/C,EAAwDK,YAAxD,EAAsErB,QAAtE,EAAgF;AAC9E;AACAJ,aAASG,gBAAT,CAA0B,CAACW,KAAD,EAAQF,WAAR,KAAwB;AAChD,UAAIE,KAAJ,EAAW;AACTV,iBAASU,KAAT,EAAgB,IAAhB;AACD,OAFD,MAEO;AACL,YAAIO,UAAUT,WAAd;AACA,YAAIQ,WAAW,KAAf,EAAsB;AAAE;AACtBC,oBAAUA,QAAQC,MAAR,CAAeJ,KAAKA,EAAEK,YAAF,IAAkBH,OAAtC,CAAV;AACD;AACD,YAAIK,gBAAgB,KAApB,EAA2B;AAAE;AAC3BJ,oBAAUA,QAAQC,MAAR,CAAeJ,KAAKA,EAAEO,YAAF,IAAkBA,YAAtC,CAAV;AACD;AACDrB,iBAAS,IAAT,EAAeiB,OAAf;AACD;AACF,KAbD;AAcD;;AAED;;;AAGA,SAAOM,kBAAP,CAA0BvB,QAA1B,EAAoC;AAClC;AACAJ,aAASG,gBAAT,CAA0B,CAACW,KAAD,EAAQF,WAAR,KAAwB;AAChD,UAAIE,KAAJ,EAAW;AACTV,iBAASU,KAAT,EAAgB,IAAhB;AACD,OAFD,MAEO;AACL;AACA,cAAMc,gBAAgBhB,YAAYiB,GAAZ,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAUnB,YAAYmB,CAAZ,EAAeN,YAAzC,CAAtB;AACA;AACA,cAAMO,sBAAsBJ,cAAcN,MAAd,CAAqB,CAACQ,CAAD,EAAIC,CAAJ,KAAUH,cAAcK,OAAd,CAAsBH,CAAtB,KAA4BC,CAA3D,CAA5B;AACA3B,iBAAS,IAAT,EAAe4B,mBAAf;AACD;AACF,KAVD;AAWD;;AAED;;;AAGA,SAAOE,aAAP,CAAqB9B,QAArB,EAA+B;AAC7B;AACAJ,aAASG,gBAAT,CAA0B,CAACW,KAAD,EAAQF,WAAR,KAAwB;AAChD,UAAIE,KAAJ,EAAW;AACTV,iBAASU,KAAT,EAAgB,IAAhB;AACD,OAFD,MAEO;AACL;AACA,cAAMqB,WAAWvB,YAAYiB,GAAZ,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAUnB,YAAYmB,CAAZ,EAAeR,YAAzC,CAAjB;AACA;AACA,cAAMa,iBAAiBD,SAASb,MAAT,CAAgB,CAACQ,CAAD,EAAIC,CAAJ,KAAUI,SAASF,OAAT,CAAiBH,CAAjB,KAAuBC,CAAjD,CAAvB;AACA3B,iBAAS,IAAT,EAAegC,cAAf;AACD;AACF,KAVD;AAWD;;AAED;;;AAGA,SAAOC,gBAAP,CAAwBrB,UAAxB,EAAoC;AAClC,WAAS,wBAAuBA,WAAWX,EAAG,EAA9C;AACD;;AAED;;;AAGA,SAAOiC,qBAAP,CAA6BtB,UAA7B,EAAyC;AACvC,WAAS,QAAOA,WAAWuB,UAAW,MAAtC;AACD;;AAED;;;AAGA,SAAOC,sBAAP,CAA8BxB,UAA9B,EAA0Ca,GAA1C,EAA+C;AAC7C;AACA,UAAMY,SAAS,IAAIC,EAAED,MAAN,CAAa,CAACzB,WAAW2B,MAAX,CAAkBC,GAAnB,EAAwB5B,WAAW2B,MAAX,CAAkBE,GAA1C,CAAb,EAA6D;AAC1EC,aAAO9B,WAAW+B,IADwD;AAE1EC,WAAKhC,WAAW+B,IAF0D;AAG1EE,WAAKjD,SAASqC,gBAAT,CAA0BrB,UAA1B;AAHqE,KAA7D,CAAf;AAKAyB,WAAOS,KAAP,CAAaC,MAAb;AACA,WAAOV,MAAP;AACD;AACD;;;;;;;;;;;AA5La","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}/restaurants/`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback, id) {\r\n    let fetchURL;\r\n    if (!id) {\r\n      fetchURL = DBHelper.DATABASE_URL;\r\n    } else {\r\n      fetchURL = DBHelper.DATABASE_URL + '/' + id;\r\n    }\r\n\r\n    //let xhr = new XMLHttpRequest();\r\n\r\n    fetch(fetchURL, {\r\n      method: 'GET'\r\n    })\r\n    .then(response => {\r\n      return response.json();\r\n    })\r\n    .then(restaurants => {\r\n      //console.log('restaurants JSON: ', restaurants);\r\n      callback(null, restaurants);\r\n    })\r\n    .catch(error => {\r\n      callback(`Unable to fulfill request. ${error}`, null);\r\n    });\r\n    /*\r\n        xhr.open('GET', DBHelper.DATABASE_URL);\r\n        xhr.onload = () => {\r\n          if (xhr.status === 200) { // Got a success response from server!\r\n            const json = JSON.parse(xhr.responseText);\r\n            const restaurants = json.restaurants;\r\n            callback(null, restaurants);\r\n          } else { // Oops!. Got an error from server.\r\n            const error = (`Request failed. Returned status of ${xhr.status}`);\r\n            callback(error, null);\r\n          }\r\n        };\r\n        xhr.send();\r\n        */\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`/img/${restaurant.photograph}.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker\r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng], {\r\n      title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n    });\r\n    marker.addTo(newMap);\r\n    return marker;\r\n  }\r\n  /* static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  } */\r\n\r\n}\r\n"]}