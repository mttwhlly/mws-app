{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","DATABASE_URL","port","fetchRestaurants","callback","id","fetchURL","fetch","method","then","response","json","restaurants","dBPromise","db","tr","transaction","restaurantStore","objectStore","getAll","length","Promise","resolve","cacheRestaurants","catch","error","fetchRestaurantById","restaurant","find","r","fetchRestaurantByCuisine","cuisine","results","filter","cuisine_type","fetchRestaurantByNeighborhood","neighborhood","fetchRestaurantByCuisineAndNeighborhood","fetchNeighborhoods","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","fetchCuisines","cuisines","uniqueCuisines","urlForRestaurant","imageUrlForRestaurant","photograph","idb","open","upgradeDB","oldVersion","createObjectStore","keyPath","forEach","put","complete","getStoredObjectById","table","idx","store","indexId","index","fetchReviews","reviews","Array","isArray","review","console","log","storedReviews","updateFave","restaurantID","isFavorite","get","is_favorite","fetchServerReviews","getDbReviews","dBReviews","addReview","offlineReview","name","data","objectType","navigator","onLine","storeAndSendReviews","reviewSend","parseInt","rating","comments","restaurant_id","fetchOptions","body","JSON","stringify","headers","Headers","contentType","localStorage","setItem","window","addEventListener","event","parse","getItem","document","querySelectorAll","el","classList","remove","querySelector","removeItem","mapMarkerForRestaurant","marker","L","latlng","lat","lng","title","alt","url","addTo","newMap"],"mappings":"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","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}`;\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants.\r\n   */\r\n  static fetchRestaurants(callback, id) {\r\n    let fetchURL;\r\n    if (!id) {\r\n      fetchURL = DBHelper.DATABASE_URL + '/restaurants';\r\n    } else {\r\n      fetchURL = DBHelper.DATABASE_URL + '/restaurants/' + id;\r\n    }\r\n\r\n    fetch(fetchURL, {\r\n        method: 'GET'\r\n      })\r\n      .then(response => {\r\n        //console.log('fetch')\r\n        return response.json();\r\n      })\r\n      .then(restaurants => {\r\n        //console.log('restaurants JSON: ', restaurants);\r\n        callback(null, restaurants);\r\n        return this.dBPromise()\r\n      })\r\n      .then(db => {\r\n        const tr = db.transaction('restaurants');\r\n        const restaurantStore = tr.objectStore('restaurants');\r\n        return restaurantStore.getAll();\r\n      })\r\n      .then(restaurants => {\r\n        if (restaurants.length !== 0) {\r\n          return Promise.resolve(restaurants);\r\n        }\r\n        return this.cacheRestaurants();\r\n      })\r\n      .catch(error => {\r\n        callback(`Unable to fulfill request. ${error}`, null);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by ID\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`/img/${restaurant.photograph}.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Open IndexedDB stores using IDB.js\r\n   */\r\n  static dBPromise() {\r\n    return idb.open('restaurantDb', 2, (upgradeDB) => {\r\n      switch (upgradeDB.oldVersion) {\r\n        case 0:\r\n          upgradeDB.createObjectStore('restaurants', {\r\n            keyPath: 'id'\r\n          })\r\n        case 1:\r\n          upgradeDB.createObjectStore('reviews', {\r\n            keyPath: 'id'\r\n          })\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add restaurants to IndexedDB\r\n   */\r\n  static cacheRestaurants() {\r\n    return fetch(DBHelper.DATABASE_URL + '/restaurants')\r\n      .then(response => response.json())\r\n      .then(restaurants => {\r\n        return this.dBPromise()\r\n          .then(db => {\r\n            const tr = db.transaction('restaurants', 'readwrite');\r\n            const restaurantStore = tr.objectStore('restaurants');\r\n            restaurants.forEach(restaurant => restaurantStore.put(restaurant));\r\n\r\n            return tr.complete.then(() => Promise.resolve(restaurants));\r\n          });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Retrieve object by Id\r\n   */\r\n  static getStoredObjectById(table, idx, id) {\r\n    return this.dBPromise()\r\n      .then(function (db) {\r\n        if (!db) return;\r\n\r\n        const store = db.transaction(table).objectStore(table);\r\n        const indexId = store.index(idx);\r\n        return indexId.getAll(id);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch reviews\r\n   */\r\n  static fetchReviews(id) {\r\n    return fetch(`${DBHelper.DATABASE_URL}/reviews/?restaurant_id=${id}`)\r\n      .then(response => response.json())\r\n      .then(reviews => {\r\n        this.dBPromise()\r\n          .then(db => {\r\n            if (!db) return;\r\n\r\n            let tr = db.transaction('reviews', 'readwrite');\r\n            const store = tr.objectStore('reviews');\r\n            if (Array.isArray(reviews)) {\r\n              reviews.forEach(function (review) {\r\n                store.put(review);\r\n              });\r\n            } else {\r\n              store.put(reviews);\r\n            }\r\n          });\r\n        console.log('reviews are fetched: ', reviews);\r\n        return Promise.resolve(reviews);\r\n      })\r\n      .catch(error => {\r\n        return DBHelper.getStoredObjectById('reviews', 'restaurant', id)\r\n          .then((storedReviews) => {\r\n            console.log('looking for offline stored reviews');\r\n            return Promise.resolve(storedReviews);\r\n          })\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Update `is_favorite` in DB -- referenced: MWS Webinar Stage 3 Project Walk-Through Webinar by Elisa Romondia and Lorenzo Zaccagnini\r\n   */\r\n  static updateFave(restaurantID, isFavorite) {\r\n    console.log('updated status: ' + isFavorite)\r\n\r\n    console.log(`${this.DATABASE_URL}/restaurants/${restaurantID}/?is_favorite=${isFavorite}`)\r\n\r\n    fetch(`${this.DATABASE_URL}/restaurants/${restaurantID}/?is_favorite=${isFavorite}`, {\r\n        method: 'PUT'\r\n      })\r\n      .then(() => {\r\n        this.dBPromise().then(db => {\r\n          const tr = db.transaction('restaurants', 'readwrite');\r\n          const store = tr.objectStore('restaurants');\r\n          store.get(restaurantID)\r\n            .then(restaurant => {\r\n              console.log('updated idb: ' + restaurant);\r\n              restaurant.is_favorite = isFavorite;\r\n              store.put(restaurant);\r\n            });\r\n        });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch reviews from server\r\n   */\r\n  static fetchServerReviews(id) {\r\n    return fetch(`${DBHelper.DATABASE_URL}reviews/?restaurantid?=${id}`)\r\n      .then(response => response.json())\r\n      .then(reviews => {\r\n        this.dBPromise()\r\n          .then(db => {\r\n            //if (!db) return;\r\n            const tr = db.transaction('reviews', 'readwrite');\r\n            const store = tr.objectStore('reviews');\r\n            if (Array.isArray(reviews)) {\r\n              reviews.forEach(function (review) {\r\n                store.put(review);\r\n              });\r\n            } else {\r\n              store.put(reviews);\r\n            }\r\n          });\r\n        return Promise.resolve(reviews);\r\n      })\r\n      .catch(error => {\r\n        return DBHelper.getDbReviews('reviews', 'restaurant', id)\r\n          .then((dBReviews) => {\r\n            return Promise.resolve(dBReviews);\r\n          })\r\n      })\r\n  }\r\n  /**\r\n   * Add reviews to localstorage if offline\r\n   */\r\n  static addReview(review) {\r\n    let offlineReview = {\r\n      name: 'addReview',\r\n      data: review,\r\n      objectType: 'review'\r\n    };\r\n    // check if offline\r\n    if (!navigator.onLine && (offlineReview.name === 'addReview')) {\r\n      DBHelper.storeAndSendReviews(offlineReview);\r\n      return;\r\n    }\r\n    let reviewSend = {\r\n      'name': review.name,\r\n      'rating': parseInt(review.rating),\r\n      'comments': review.comments,\r\n      'restaurant_id': parseInt(review.restaurant_id)\r\n    };\r\n    let fetchOptions = {\r\n      method: 'POST',\r\n      body: JSON.stringify(reviewSend),\r\n      headers: new Headers({\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n      })\r\n    };\r\n    fetch(`http://localhost:1337/reviews`, fetchOptions).then((response) => {\r\n        const contentType = response.headers.get('content-type');\r\n        if (contentType && contentType.indexOf('application/json') !== -1) {\r\n          return response.json();\r\n        } else {\r\n          return 'API called'\r\n        }\r\n      })\r\n      .then((data) => console.log('fetch worked bruh'))\r\n      .catch(error)\r\n  }\r\n\r\n  /**\r\n   * Send reviews to server when online\r\n   */\r\n  static storeAndSendReviews(offlineReview) {\r\n    localStorage.setItem('data', JSON.stringify(offlineReview.data));\r\n    window.addEventListener('online', (event) => {\r\n      let data = JSON.parse(localStorage.getItem('data'));\r\n      [...document.querySelectorAll('.reviewsOffline')]\r\n      .forEach(el => {\r\n        el.classList.remove('reviewsOffline')\r\n        el.querySelector('.offlineLabel').remove();\r\n      });\r\n      if (data !== null) {\r\n        if (offlineReview.name === 'addReview') {\r\n          DBHelper.addReview(offlineReview.data);\r\n        }\r\n        localStorage.removeItem('data');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker\r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng], {\r\n      title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n    });\r\n    marker.addTo(newMap);\r\n    return marker;\r\n  }\r\n}\r\n"]}