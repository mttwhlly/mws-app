{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","DATABASE_URL","port","fetchRestaurants","callback","id","fetchURL","fetch","method","then","response","json","restaurants","catch","error","fetchRestaurantById","restaurant","find","r","fetchRestaurantByCuisine","cuisine","results","filter","cuisine_type","fetchRestaurantByNeighborhood","neighborhood","fetchRestaurantByCuisineAndNeighborhood","fetchNeighborhoods","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","fetchCuisines","cuisines","uniqueCuisines","urlForRestaurant","imageUrlForRestaurant","photograph","dBPromise","idb","open","upgradeDB","oldVersion","createObjectStore","keyPath","getStoredObjectById","table","idx","db","store","transaction","objectStore","indexId","index","getAll","fetchReviews","reviews","tx","Array","isArray","forEach","review","put","console","log","Promise","resolve","storedReviews","updateFave","restaurantID","isFavorite","tr","get","is_favorite","fetchServerReviews","getDbReviews","dBReviews","addReview","offlineObj","name","data","objectType","navigator","onLine","storeAndSendReviews","reviewSend","parseInt","rating","comments","restaurant_id","fetchOptions","body","JSON","stringify","headers","Headers","fetch_options","contentType","localStorage","setItem","window","addEventListener","event","parse","getItem","document","querySelectorAll","el","classList","remove","querySelector","removeItem","mapMarkerForRestaurant","marker","L","latlng","lat","lng","title","alt","url","addTo","newMap"],"mappings":"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","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port\r\n    return `http://localhost:${port}`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback, id) {\r\n    let fetchURL;\r\n    if (!id) {\r\n      fetchURL = DBHelper.DATABASE_URL + '/restaurants';\r\n    } else {\r\n      fetchURL = DBHelper.DATABASE_URL + '/restaurants/' + id;\r\n    }\r\n\r\n    //let xhr = new XMLHttpRequest();\r\n\r\n    fetch(fetchURL, {\r\n        method: 'GET'\r\n      })\r\n      .then(response => {\r\n        //console.log('fetch')\r\n        return response.json();\r\n      })\r\n      .then(restaurants => {\r\n        //console.log('restaurants JSON: ', restaurants);\r\n        callback(null, restaurants);\r\n      })\r\n      .catch(error => {\r\n        callback(`Unable to fulfill request. ${error}`, null);\r\n      });\r\n    /*\r\n        xhr.open('GET', DBHelper.DATABASE_URL);\r\n        xhr.onload = () => {\r\n          if (xhr.status === 200) { // Got a success response from server!\r\n            const json = JSON.parse(xhr.responseText);\r\n            const restaurants = json.restaurants;\r\n            callback(null, restaurants);\r\n          } else { // Oops!. Got an error from server.\r\n            const error = (`Request failed. Returned status of ${xhr.status}`);\r\n            callback(error, null);\r\n          }\r\n        };\r\n        xhr.send();\r\n        */\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`/img/${restaurant.photograph}.jpg`);\r\n  }\r\n  /**\r\n   * Put restaurant info into IndexedDB using IDB.js\r\n   */\r\n\r\n  static dBPromise() {\r\n    return idb.open('restaurantDb', 1, (upgradeDB) => {\r\n      switch (upgradeDB.oldVersion) {\r\n        case 0:\r\n          upgradeDB.createObjectStore('restaurants', {\r\n            keyPath: 'id'\r\n          })\r\n        case 1:\r\n          upgradeDB.createObjectStore('reviews', {\r\n            keyPath: 'id'\r\n        })//.createIndex('restaurant_id', 'restaurant_id');\r\n          // TODO: add case 2 that deals with reviews\r\n      }\r\n    });\r\n  }\r\n/*\r\n  static fetchRestaurants() {\r\n    return this.dBPromise()\r\n      .then(db => {\r\n        const tr = db.transaction('restaurants');\r\n        const restaurantStore = tr.objectStore('restaurants');\r\n        return restaurantStore.getAll();\r\n      })\r\n      .then(restaurants => {\r\n        if (restaurants.length !== 0) {\r\n          return Promise.resolve(restaurants);\r\n        }\r\n        return this.cacheRestaurants();\r\n      })\r\n  }\r\n\r\n  static cacheRestaurants() {\r\n    return fetch(DBHelper.DATABASE_URL + '/restaurants')\r\n      .then(response => response.json())\r\n      .then(restaurants => {\r\n        return this.dBPromise()\r\n          .then(db => {\r\n            const tr = db.transaction('restaurants', 'readwrite');\r\n            const restaurantStore = tr.objectStore('restaurants');\r\n            restaurants.forEach(restaurant => restaurantStore.put(restaurant));\r\n\r\n            return tr.complete.then(() => Promise.resolve(restaurants));\r\n          });\r\n      });\r\n  }\r\n*/\r\n\r\nstatic getStoredObjectById(table, idx, id) {\r\n  return this.dBPromise()\r\n    .then(function(db) {\r\n      if (!db) return;\r\n\r\n      const store = db.transaction(table).objectStore(table);\r\n      const indexId = store.index(idx);\r\n      return indexId.getAll(id);\r\n    });\r\n}\r\n\r\n// fetch reviews\r\nstatic fetchReviews(id) {\r\n  return fetch(`${DBHelper.DATABASE_URL}/reviews/?restaurant_id=${id}`)\r\n    .then(response => response.json())\r\n    .then(reviews => {\r\n      this.dBPromise()\r\n        .then(db => {\r\n          if (!db) return;\r\n\r\n          let tx = db.transaction('reviews', 'readwrite');\r\n          const store = tx.objectStore('reviews');\r\n          if (Array.isArray(reviews)) {\r\n            reviews.forEach(function(review) {\r\n              store.put(review);\r\n            });\r\n          } else {\r\n            store.put(reviews);\r\n          }\r\n        });\r\n      console.log('revs are: ', reviews);\r\n      return Promise.resolve(reviews);\r\n    })\r\n    .catch(error => {\r\n      return DBHelper.getStoredObjectById('reviews', 'restaurant', id)\r\n        .then((storedReviews) => {\r\n          console.log('looking for offline stored reviews');\r\n          return Promise.resolve(storedReviews);\r\n        })\r\n    });\r\n}\r\n  /**\r\n   * Update `is_favorite` in DB -- referenced: MWS Webinar Stage 3 Project Walk-Through Webinar by Elisa Romondia and Lorenzo Zaccagnini\r\n   */\r\n\r\n  static updateFave(restaurantID, isFavorite) {\r\n    console.log('updated status: ' + isFavorite)\r\n\r\n    console.log(`${this.DATABASE_URL}/restaurants/${restaurantID}/?is_favorite=${isFavorite}`)\r\n\r\n    fetch(`${this.DATABASE_URL}/restaurants/${restaurantID}/?is_favorite=${isFavorite}`, {\r\n        method: 'PUT'\r\n      })\r\n      .then(() => {\r\n        this.dBPromise().then(db => {\r\n          /*if (!db.ok) {\r\n            throw new TypeError('Bad response status');\r\n          } else {\r\n            console.log(db)\r\n          }*/\r\n          const tr = db.transaction('restaurants', 'readwrite');\r\n          const store = tr.objectStore('restaurants');\r\n          store.get(restaurantID)\r\n            .then(restaurant => {\r\n              console.log('updated idb: ' + restaurant);\r\n              restaurant.is_favorite = isFavorite;\r\n              store.put(restaurant);\r\n            });\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * fetch restaurant reviews from REST server\r\n   */\r\n\r\n  static fetchServerReviews(id) {\r\n    return fetch(`${DBHelper.DATABASE_URL}reviews/?restaurantid?=${id}`)\r\n      .then(response => response.json())\r\n      .then(reviews => {\r\n          this.dBPromise()\r\n            .then(db => {\r\n              //if (!db) return;\r\n              const tr = db.transaction('reviews', 'readwrite');\r\n              const store = tr.objectStore('reviews');\r\n              if (Array.isArray(reviews)) {\r\n                reviews.forEach(function(review){\r\n                    store.put(review);\r\n                  });\r\n              } else {\r\n                store.put(reviews);\r\n              }\r\n            });\r\n            return Promise.resolve(reviews);\r\n        })\r\n        .catch(error => {\r\n          return DBHelper.getDbReviews('reviews', 'restaurant', id)\r\n            .then((dBReviews) => {\r\n              return Promise.resolve(dBReviews);\r\n            })\r\n        })\r\n    }\r\n\r\n    static addReview(review) {\r\n      let offlineObj = {\r\n        name: 'addReview',\r\n        data: review,\r\n        objectType: 'review'\r\n      };\r\n      // find out if offline\r\n      if (!navigator.onLine && (offlineObj.name === 'addReview')) {\r\n        DBHelper.storeAndSendReviews(offlineObj);\r\n        return;\r\n      }\r\n      let reviewSend = {\r\n        'name': review.name,\r\n        'rating': parseInt(review.rating),\r\n        'comments': review.comments,\r\n        'restaurant_id': parseInt(review.restaurant_id)\r\n      };\r\n      var fetchOptions = {\r\n        method: 'POST',\r\n        body: JSON.stringify(reviewSend),\r\n        headers: new Headers({\r\n          'Content-Type': 'application/json; charset=utf-8'\r\n        })\r\n      };\r\n      fetch(`http://localhost:1337/reviews`, fetch_options).then((response) => {\r\n        const contentType = response.headers.get('content-type');\r\n        if (contentType && contentType.indexOf('application/json') !== -1) {\r\n          return response.json();\r\n        } else { return 'API called'}})\r\n        .then((data) => console.log('fetch worked bruh'))\r\n        .catch(error)\r\n    }\r\n\r\n    static storeAndSendReviews(offlineObj) {\r\n      localStorage.setItem('data', JSON.stringify(offlineObj.data));\r\n      window.addEventListener('online', (event) => {\r\n        let data = JSON.parse(localStorage.getItem('data'));\r\n        [...document.querySelectorAll('.reviewsOffline')]\r\n        .forEach(el => {\r\n          el.classList.remove('reviewsOffline')\r\n          el.querySelector('.offlineLabel').remove();\r\n        });\r\n        if (data !== null) {\r\n          if (offlineObj.name === 'addReview') {\r\n            DBHelper.addReview(offlineObj.data);\r\n          }\r\n          localStorage.removeItem('data');\r\n        }\r\n      });\r\n    }\r\n\r\n/**\r\n * Map marker for a restaurant.\r\n */\r\nstatic mapMarkerForRestaurant(restaurant, map) {\r\n  // https://leafletjs.com/reference-1.3.0.html#marker\r\n  const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng], {\r\n    title: restaurant.name,\r\n    alt: restaurant.name,\r\n    url: DBHelper.urlForRestaurant(restaurant)\r\n  });\r\n  marker.addTo(newMap);\r\n  return marker;\r\n}\r\n/* static mapMarkerForRestaurant(restaurant, map) {\r\n  const marker = new google.maps.Marker({\r\n    position: restaurant.latlng,\r\n    title: restaurant.name,\r\n    url: DBHelper.urlForRestaurant(restaurant),\r\n    map: map,\r\n    animation: google.maps.Animation.DROP}\r\n  );\r\n  return marker;\r\n} */\r\n\r\n}\r\n"]}