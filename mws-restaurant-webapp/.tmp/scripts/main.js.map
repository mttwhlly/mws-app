{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","map","markers","document","addEventListener","event","initMap","fetchNeighborhoods","fetchCuisines","DBHelper","error","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","fillCuisinesHTML","cuisine","newMap","L","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","id","addTo","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","ul","marker","remove","restaurant","createRestaurantHTML","addMarkersToMap","li","image","className","src","imageUrlForRestaurant","setAttribute","changeHeart","el","hrt","log","classList","add","heart","onclick","isHeart","is_favorite","updateFave","name","address","more","url","urlForRestaurant","window","location","mapMarkerForRestaurant","on","onClick","href","options","push"],"mappings":"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","file":"main.js","sourcesContent":["/**\n * Variables\n */\nlet restaurants,\n  neighborhoods,\n  cuisines;\nvar map;\nvar markers = [];\n\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  initMap(); // added\n  fetchNeighborhoods();\n  fetchCuisines();\n});\n\n/**\n * Fetch all neighborhoods and set their HTML\n */\nfetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) { // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n};\n\n/**\n * Set neighborhoods HTML\n */\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach(neighborhood => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n};\n\n/**\n * Fetch all cuisines and set their HTML\n */\nfetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n};\n\n/**\n * Set cuisines HTML\n */\nfillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n\n  cuisines.forEach(cuisine => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\n * Initialize leaflet map, called from HTML\n */\ninitMap = () => {\n  self.newMap = L.map('map', {\n        center: [40.722216, -73.987501],\n        zoom: 12,\n        scrollWheelZoom: false\n      });\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token=pk.eyJ1IjoibXR0d2hsbHkiLCJhIjoiY2prZngzcGF1MGRhcTNwbzlhYTlza2NicyJ9.Cw82KbQTNdjYdobD3HTK-w', {\n    mapboxToken: 'pk.eyJ1IjoibXR0d2hsbHkiLCJhIjoiY2prZngzcGF1MGRhcTNwbzlhYTlza2NicyJ9.Cw82KbQTNdjYdobD3HTK-w',\n    maxZoom: 18,\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n      'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n    id: 'mapbox.streets'\n  }).addTo(newMap);\n\n  updateRestaurants();\n}\n\n/**\n * If using Google maps\n */\n  /*window.initMap = () => {\n  let loc = {\n    lat: 40.722216,\n    lng: -73.987501\n  };\n  self.map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 12,\n    center: loc,\n    scrollwheel: false\n  });\n  updateRestaurants();\n}; */\n\n/**\n * Update page and map for current restaurants.\n */\nupdateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      resetRestaurants(restaurants);\n      fillRestaurantsHTML();\n    }\n  });\n};\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nresetRestaurants = (restaurants) => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  if (self.markers) {\n    self.markers.forEach(marker => marker.remove());\n  }\n  self.markers = [];\n  self.restaurants = restaurants;\n};\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach(restaurant => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  addMarkersToMap();\n};\n\n/**\n * Create restaurant HTML.\n */\ncreateRestaurantHTML = (restaurant) => {\n  //console.log('test')\n  const li = document.createElement('li');\n  const image = document.createElement('img');\n  image.className = 'restaurant-img';\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.setAttribute('alt', image.src);\n  li.append(image);\n\n  /**\n   * Favorite button UI & functionality\n   */\n  const changeHeart = (el, hrt) => {\n    if (!hrt) {\n      console.log('not a fave');\n      el.classList.remove('yes');\n      el.classList.add('no');\n      el.setAttribute('aria-label', 'select as a favorite');\n    } else {\n      console.log('a fave');\n      el.classList.remove('no');\n      el.classList.add('yes');\n      el.setAttribute('aria-label', 'deselect as a favorite');\n    }\n  };\n\n  const heart = document.createElement('button');\n  heart.innerHTML = '&hearts;';\n  heart.classList.add('heart');\n  heart.onclick = function() {\n    console.log('im working');\n    const isHeart = !restaurant.is_favorite;\n    DBHelper.updateFave(restaurant.id, isHeart);\n    restaurant.is_favorite = !restaurant.is_favorite;\n    changeHeart(heart, restaurant.is_favorite);\n  };\n  changeHeart(heart, restaurant.is_favorite);\n  li.append(heart);\n\n  const name = document.createElement('h1');\n  name.innerHTML = restaurant.name;\n  li.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.className = 'neighborhood';\n  neighborhood.innerHTML = restaurant.neighborhood;\n  li.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  li.append(address);\n\n  const more = document.createElement('button');\n  more.className = 'more';\n  more.innerHTML = 'View Details';\n  more.onclick = function() {\n    const url = DBHelper.urlForRestaurant(restaurant);\n    window.location = url;\n  };\n  li.append(more);\n\n  return li;\n};\n\n/**\n * Add markers for current restaurants to the map.\n */\naddMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach(restaurant => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\n    marker.on('click', onClick);\n    function onClick() {\n      window.location.href = marker.options.url;\n    }\n    self.markers.push(marker);\n  });\n}\n"]}